#version 300 es

precision highp float;

in vec2 v_texcoord;
uniform sampler2D u_texture0;

uniform vec4 u_color;

// u_outline_width_absolute: [1/3, 0, 2.0],
// u_outline_width_relative: [1/20, 0, 1/4],
// u_outline_blur: [0, 0, 1],
// u_rounded_fonts: [0, 0, 1], // 1 for sdf, 0 for msdf
// u_rounded_outlines: [0, 0, 1], // 1 for sdf, 0 for msdf
// u_threshold: [1/2, 1/4, 3/4], // where the in/out boundary is in sdf coords
// u_out_bias: [1/4, -1/2, 1/2], // applied in pixel coordinates
// u_gradient: [0, 0, 1], // experimenting with bevel shape
// u_gamma: [1, 1/2.5, 2.5], // try 1.5

out vec4 o_color;
uniform vec2 u_unitRange;
const float u_rounded_fonts = 0.5f;
const float u_rounded_outlines = 0.5f;
const float u_threshold = 0.50f;
const float u_out_bias = 1.0f / 5.0f;
const float u_outline_width_absolute = 1.0f / 3.0f;
const float u_outline_width_relative = 1.0f / 5.0f;
const float u_outline_blur= 0.8f;
const float u_gradient = 0.0f;
const float u_gamma = 1.5f;

/* sample code from https://github.com/Chlumsky/msdfgen */
float median(float r, float g, float b) {
    return max(min(r, g), min(max(r, g), b));
}

float screenPxRange() {
    vec2 screenTexSize = vec2(1.0f) / fwidth(v_texcoord);
    return max(0.5f * dot(u_unitRange, screenTexSize), 1.0f);
}

void main() {
  // distances are stored with 1.0 meaning "inside" and 0.0 meaning "outside"
    vec4 distances = texture(u_texture0, v_texcoord);
    float d_msdf = median(distances.r, distances.g, distances.b);
    float d_sdf = distances.a; // mtsdf format only
    d_msdf = min(d_msdf, d_sdf + 0.1f);  // HACK: to fix glitch in msdf near edges

  // blend between sharp and rounded corners
    float d_inner = mix(d_msdf, d_sdf, u_rounded_fonts);
    float d_outer = mix(d_msdf, d_sdf, u_rounded_outlines);

  // typically 0.5 is the threshold, >0.5 inside <0.5 outside
    float inverted_threshold = 1.0f - u_threshold; // because I want the ui to be +larger -smaller
    float width = screenPxRange();
    float inner = width * (d_inner - inverted_threshold) + 0.5f + u_out_bias;
    float outer = width * (d_outer - inverted_threshold + u_outline_width_relative) + 0.5f + u_out_bias + u_outline_width_absolute;

    float inner_opacity = clamp(inner, 0.0f, 1.0f);
    vec4 inner_color = u_color;
    float outer_opacity = clamp(outer, 0.0f, 1.0f);
    vec4 outer_color = vec4(0, 0, 0, 1);

    if(u_outline_blur > 0.0f) {
    // NOTE: the smoothstep fails when the two edges are the same, and I wish it
    // would act like a step function instead of failing.
    // NOTE: I'm using d_sdf here because I want the shadows to be rounded
    // even when outlines are sharp. But I don't yet have implemented a way
    // to see the sharp outline with a rounded shadow.
        float blur_start = u_outline_width_relative + u_outline_width_absolute / width;
        outer_color.a = smoothstep(blur_start, blur_start * (1.0f - u_outline_blur), inverted_threshold - d_sdf - u_out_bias / width);
    }

  // apply some lighting (hard coded angle)
    if(u_gradient > 0.0f) {
     // NOTE: this is not a no-op so it changes the rendering even when
     // u_gradient is 0.0. So I use an if() instead. But ideally I'd
     // make this do nothing when u_gradient is 0.0.
        vec2 normal = normalize(vec3(dFdx(d_inner), dFdy(d_inner), 0.01f)).xy;
        float light = 0.5f * (1.0f + dot(normal, normalize(vec2(-0.3f, -0.5f))));
        inner_color = mix(inner_color, vec4(light, light, light, 1), smoothstep(u_gradient + inverted_threshold, inverted_threshold, d_inner));
    }

  // unlike in the 2403 experiments, I do know the color is light
  // and the shadow is dark so I can implement gamma correction
    inner_opacity = pow(inner_opacity, 1.0f / u_gamma);


    vec4 color = ((inner_color) * inner_opacity) + (outer_color * (outer_opacity - inner_opacity));
    o_color = color;
    // o_color = u_color;
    // o_color = vec4(1);
}
